#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/stat.h>
#include <dirent.h>
#include <string.h>
//check if the path is valid
//check if the path is a file 

int processPath(char* path);
void checkPath(char* path);
void processSelf(char* arg);
int getFileSize(char* path);
int iterateDir(char* path);
int countDir(char* path);

int main(int argc, char* argv[]){
	if(argc == 1)
		processSelf(argv[0]);
	else if(argc == 2)
		processPath(argv[1]);
	else 
		printf("Too many arguments. Exiting\n");
	return 0;
}
//processes the path given by the user in argv
int processPath(char* path){
	checkPath(path);
	int c = countDir(path);
	printf("%i\n", c);
	//return iterateDir(path);
	return 1;
}
//checks if the path provided is a valid path
//the program exits if the path isn't valid or if
//the provided path points to a file
void checkPath(char* path){
	if(!opendir(path)){
		printf("%s is an invalid path. Exiting.\n", path);
		exit(1);	
	}
}
//get the current working directory to
//run du on. program exits if there's a problem
//getting the path. Assuming that the path for the
//program is never longer than 512 chars
void processSelf(char* arg){
	char absolutePath[512];
	if(!getcwd(absolutePath, 512)){
		printf("Error obtaining the path for %s\n", arg);
		exit(1);
	}
	processPath(absolutePath);
}
//go through each item in the given path
//prints out file info for each file or
//changes into the directory given to process
int iterateDir(char *path){
	printf("%s\n", path);
	int size = 0;
	int *duplicates = malloc(countDir(path) * sizeof(int));
	DIR* d = opendir(path);
	struct dirent* dir;

	if(!duplicates){
		printf("error mallocing\n");
		exit(1);
	}

	while(d && ((dir = readdir(d)) != NULL)){

	}

	closedir(d);
	return size;
}
int countDir(char* path){
	DIR* d = opendir(path);
	struct dirent* dir;
	int count = 0;
	while(d && ((dir = readdir(d)) != NULL)){
		count++;
	}
	return count;
}
/*int iterateDir(char *path){
	int size = 0;
	char* subpath;
	DIR *d;
	struct dirent *dir;
	d = opendir(path);
	if(d){
		while((dir = readdir(d)) != NULL){
			if(strcmp(dir->d_name, ".") == 0 || strcmp(dir->d_name, "..") == 0)
				continue;
			subpath = malloc(2 + strlen(dir->d_name) + strlen(path));
			strcpy(subpath, path);
			strcat(subpath, "/");
			strcat(subpath, dir->d_name);
			if(opendir(dir->d_name)){
				size = size + processPath(subpath);
				continue;
			}
			size = size + getSizeInfo(subpath);
			free(subpath);
		}
		printf("%i\t%s\n", size, path);
		closedir(d);
	}
	return size;
}*/

int getFileSize(char* path){
	struct stat buf;
	if(lstat(path, &buf) == -1){
		printf("error with lstat");
		return 0;
	}
	printf("%i\t%s\n", buf.st_size, path);
	return buf.st_size; //buf->size
}


